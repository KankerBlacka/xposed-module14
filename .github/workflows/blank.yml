name: Build LSPosed Module APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual builds

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        accept-android-sdk-licenses: true
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Setup Build Configuration
      run: |
        # Clean up any existing gradle files to start fresh
        rm -rf .gradle/
        rm -f build.gradle build.gradle.kts
        rm -f settings.gradle settings.gradle.kts
        rm -f gradle.properties
        rm -f local.properties
        rm -rf app/build/
        rm -f app/build.gradle app/build.gradle.kts
        
        # Create gradle.properties
        cat > gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.nonTransitiveRClass=false
        android.defaults.buildfeatures.buildconfig=true
        EOF
        
        # Create settings.gradle (simpler version)
        cat > settings.gradle << 'EOF'
        rootProject.name = "XposedModule"
        include ':app'
        EOF
        
        # Create root build.gradle
        cat > build.gradle << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:7.4.2'
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url 'https://api.xposed.info/' }
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        # Create app directory structure
        mkdir -p app/src/main/java/com/example/xposedmodule
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/assets
        
        # Create app/build.gradle
        cat > app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
        }
        
        android {
            namespace 'com.example.xposedmodule'
            compileSdk 33
            
            defaultConfig {
                applicationId "com.example.xposedmodule"
                minSdk 21
                targetSdk 33
                versionCode 1
                versionName "1.0"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                }
                debug {
                    minifyEnabled false
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
            }
            
            packagingOptions {
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/NOTICE.txt'
            }
        }
        
        dependencies {
            compileOnly 'de.robv.android.xposed:api:82'
            implementation 'androidx.appcompat:appcompat:1.6.1'
        }
        EOF
        
        # Create AndroidManifest.xml
        cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">
            
            <application
                android:allowBackup="true"
                android:label="Xposed Module"
                android:supportsRtl="true"
                tools:targetApi="33">
                
                <meta-data
                    android:name="xposedmodule"
                    android:value="true" />
                <meta-data
                    android:name="xposeddescription"
                    android:value="LSPosed Module" />
                <meta-data
                    android:name="xposedminversion"
                    android:value="82" />
                <meta-data
                    android:name="xposedscope"
                    android:resource="@array/xposed_scope" />
            </application>
        </manifest>
        EOF
        
        # Create Main hook class
        cat > app/src/main/java/com/example/xposedmodule/Main.java << 'EOF'
        package com.example.xposedmodule;
        
        import de.robv.android.xposed.IXposedHookLoadPackage;
        import de.robv.android.xposed.XposedBridge;
        import de.robv.android.xposed.callbacks.XC_LoadPackage;
        
        public class Main implements IXposedHookLoadPackage {
            @Override
            public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {
                XposedBridge.log("XposedModule: Loaded in " + lpparam.packageName);
            }
        }
        EOF
        
        # Create xposed_init file
        echo "com.example.xposedmodule.Main" > app/src/main/assets/xposed_init
        
        # Create arrays.xml for scope
        cat > app/src/main/res/values/arrays.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string-array name="xposed_scope">
                <item>android</item>
                <item>com.android.systemui</item>
            </string-array>
        </resources>
        EOF
        
    - name: Setup Gradle Wrapper
      run: |
        # Download and setup gradle wrapper properly
        wget -q https://services.gradle.org/distributions/gradle-7.6-bin.zip
        unzip -q gradle-7.6-bin.zip
        gradle-7.6/bin/gradle wrapper --gradle-version 7.6
        rm -rf gradle-7.6 gradle-7.6-bin.zip
        
        # Make sure gradlew is executable
        chmod +x gradlew
        
        # Verify gradle wrapper
        ./gradlew --version
        
    - name: Build Debug APK
      run: |
        ./gradlew clean
        ./gradlew assembleDebug --no-daemon --stacktrace --info
        
    - name: List build outputs
      if: always()
      run: |
        echo "=== Checking build directory structure ==="
        find app/build -name "*.apk" 2>/dev/null || echo "No APK files found"
        ls -la app/build/outputs/apk/debug/ 2>/dev/null || echo "Debug directory not found"
        
    - name: Upload Debug APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: lsposed-module-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        if-no-files-found: error
        
    - name: Build Release APK
      run: ./gradlew assembleRelease --no-daemon --stacktrace
      
    - name: Upload Release APK  
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: lsposed-module-release-apk
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        if-no-files-found: warn
        
    - name: Build Success Summary
      if: success()
      run: |
        echo "### 🎉 LSPosed Module Build Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status**: Build Successful" >> $GITHUB_STEP_SUMMARY
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          echo "📦 **Debug APK Size**: $(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f app/build/outputs/apk/release/app-release-unsigned.apk ]; then
          echo "📦 **Release APK Size**: $(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "⬇️ **Download**: Check the 'Artifacts' section below" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Installation Instructions" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the APK from artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Install on your Android device" >> $GITHUB_STEP_SUMMARY
        echo "3. Enable in LSPosed Manager" >> $GITHUB_STEP_SUMMARY
        echo "4. Select target apps and reboot" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Build Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build/
          app/build/reports/
          app/build/outputs/logs/
